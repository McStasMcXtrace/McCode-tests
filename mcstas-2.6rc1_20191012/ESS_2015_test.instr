/*******************************************************************************
*         McStas instrument definition URL=http://www.mcstas.org
*
* Instrument: ESS_2015_test
*
* %Identification
* Written by: Jan Saroun (saroun@ujf.cas.cz)
* Date: 04/01/2016
* Origin: NPI Rez
* %INSTRUMENT_SITE: ESS
*
* Test of the ESS-2015 moderator model with updated component ESS_moderator.comp  .
*
* %Description
* Measures flux projected on a 1cm^2 target at 100 m,
* The beamline origin is centered at the nearest cross point between cold and thermal moderators.
* Accepts negative port angle. Default is -55 deg corresponding to the assumed BEER position (port 2).
* Records spatial and time distributions at 0.3 m from the beamline origin and wavelength distribution
* behind the target slit.
*
* %Parameters
* frac: []         fraction of trials from the cold moderator
* lmin: [A]       wavelength range min
* lmax: [A]       wavelength range max
* ANGLE: [deg]    port angle
* mon_shift: [m]  shift of the monitor along x-axis
* frac: []        
*
* %Link
* A reference/HTML link for more information
*
* %End
*******************************************************************************/
DEFINE INSTRUMENT ESS_2015_test(frac=0.5, lmin=0.3, lmax=8.3, ANGLE=-55, mon_shift=0.0 )

/* The DECLARE section allows us to declare variables or  small      */
/* functions in C syntax. These may be used in the whole instrument. */
DECLARE
%{
  //double lambdamin,lambdamax;
  int IsCold,np,sgn;
  char srcdef[128];
  double Yheight,power;
  double cosa,sina;
  double ctrX,ctrZ,BX0,BZ0;
  double mon_width;
%}

/* The INITIALIZE section is executed when the simulation starts     */
/* (C code). You may use them as component parameter values.          */
INITIALIZE
%{
  power=5;
  Yheight=0.03;
  np=1;
  mon_width=0.25;
  sgn= (ANGLE>0 ? 1:-1);
  cosa=cos(ANGLE*DEG2RAD);
  sina=sin(ANGLE*DEG2RAD);
  /* centre of the beamline coordinates w.r.t. moderator cooordinates  */
  ctrX=-sgn*0.0716;ctrZ=0.0827;
  /* rotated by beamport angle */
  BX0=ctrX*cosa + ctrZ*sina;
  BZ0=-ctrX*sina + ctrZ*cosa;
  printf("Beamline centered at [cm]: x= %g,  z=%g \n",ctrX*100,ctrZ*100);
  printf("after rotation by beamport angle [cm]: x= %g,  z=%g \n",BX0*100,BZ0*100);
  // printf("maximum extent of cold area [cm]: x= %g\n",(0.1425*cosa + 0.05077*sina - BX0)*100);

  sprintf(srcdef,"2015");
%}

/* Here comes the TRACE section, where the actual      */
/* instrument is defined as a sequence of components.   */
TRACE

/* The Arm() class component defines reference points and orientations  */
/* in 3D space. Every component instance must have a unique name. Here, */
/* Origin is used. This Arm() component is set to define the origin of  */
/* our global coordinate system (AT (0,0,0) ABSOLUTE). It may be used   */
/* for further RELATIVE reference, Other useful keywords are : ROTATED  */
/* EXTEND GROUP PREVIOUS. Also think about adding a neutron source !    */
/* Progress_bar is an Arm displaying simulation progress.               */
COMPONENT Origin = Progress_bar()
  AT (0,0,0) ABSOLUTE

  COMPONENT Source=ESS_moderator(yheight_t=Yheight,yheight_c=Yheight,focus_xw=0.01,focus_yh=0.01,target_index=+6,
   Lmin=lmin,Lmax=lmax, cold_frac=frac, sourcedef=srcdef, acc_power=power, n_pulses=np, beamport_angle=ANGLE)
  AT (0, 0, 0) RELATIVE  Origin
EXTEND %{
  IsCold=cold;
%}
/* comp 1: Beamline origin */
COMPONENT PortOrig = Arm()
  AT (BX0,0,BZ0) RELATIVE Origin
  ROTATED (0, 0, 0) RELATIVE Origin
/* comp 2 */
COMPONENT XmonT = PSDlin_monitor(
    nx = 250, filename = "XmonT.dat", xmin=-mon_width/2+mon_shift, xmax=mon_width/2+mon_shift, yheight = 0.04,
    restore_neutron = 1)
  WHEN(! IsCold)  AT (0, 0, 0.3) RELATIVE PortOrig
/* comp 3 */
COMPONENT XmonC = PSDlin_monitor(
    nx = 250, filename = "XmonC.dat", xmin=-mon_width/2+mon_shift, xmax=mon_width/2+mon_shift, yheight = 0.04,
    restore_neutron = 1)
  WHEN(IsCold)  AT (0, 0, 0.3) RELATIVE PortOrig
/* comp 4 */
COMPONENT tofT = TOF_monitor(
    nt = 100, filename = "tofT.dat",xmin=-mon_width/2+mon_shift, xmax=mon_width/2+mon_shift, yheight = 0.04,
    tmin = 0, tmax = 10000, restore_neutron = 1)
  WHEN(! IsCold)  AT (0, 0, 0.3) RELATIVE PortOrig
 /* comp 5 */
 COMPONENT tofC = TOF_monitor(
    nt = 100, filename = "tofC.dat", xmin=-mon_width/2+mon_shift, xmax=mon_width/2+mon_shift, yheight = 0.04,
    tmin = 0, tmax = 10000, restore_neutron = 1)
 WHEN(IsCold)  AT (0, 0, 0.3) RELATIVE PortOrig
/* comp 6, target slit */
COMPONENT Slit1 = Slit(
    xwidth = 0.01, yheight = 0.01)
  AT (0, 0,  100) RELATIVE PortOrig
/* comp 7 */
COMPONENT LamT = L_monitor(
    nL = 160, filename = "LamT.dat", xwidth = 0.02, yheight = 0.02,
    Lmin = lmin, Lmax = lmax, restore_neutron = 1)
  WHEN(! IsCold)  AT (0, 0, 0.0001) RELATIVE Slit1

/* comp 8 */
COMPONENT LamC = L_monitor(
    nL = 160, filename = "LamC.dat", xwidth = 0.02, yheight = 0.02,
    Lmin = lmin, Lmax = lmax, restore_neutron = 1)
  WHEN(IsCold)  AT (0, 0, 0.0001) RELATIVE Slit1



/* This section is executed when the simulation ends (C code). Other    */
/* optional sections are : SAVE                                         */
FINALLY
%{
%}
/* The END token marks the instrument definition end */
END
